/*
 * DispFrame.java
 *
 * Created on Mar 18, 2009, 9:30:58 AM
 */
package testbrowser3;

//import testbrowser2.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.TableColumn;

/**
 *
 * @author romanm
 */
public class DispFrame extends javax.swing.JFrame {

    /** Creates new form DispFrame */
    private boolean runThreads = false;
    private ArrayList<String[]> stockList = new ArrayList<>();
    private boolean realPriceChangeDisp = false;
    final private int  priceRow = 0; // STOCK PRICE
    final private int    chgRow = 1; // STOCK PRICE CHANGE IN %
    final private int preChgRow = 3; // STOCK PRICE CHANGE PRE/AFTER MARKET IN %
    final private int symbolRow = 2; // STOCK SYMBOL
    final private int profitRow = 4; // PROFIT IN %
    final private int    divRow = 5; // DIVIDENT % PER YEAR
    final private int qtyBuyRow = 6; // QTY TO BUY 
    
    private String str2Div = "";


    public DispFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        priceTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        stopB = new javax.swing.JButton();
        startB = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));

        priceTable.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        priceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
            }
        ));
        priceTable.setRowHeight(12);
        priceTable.setRowMargin(0);
        jScrollPane1.setViewportView(priceTable);

        stopB.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        stopB.setText("Off");
        stopB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBActionPerformed(evt);
            }
        });

        startB.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        startB.setText("On");
        startB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton1.setText("Reload");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton3.setText("Save Stk");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(stopB)
                .addGap(18, 18, 18)
                .addComponent(startB)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(stopB, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(startB, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(588, 588, 588))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBActionPerformed

        if (runThreads == false) {

            runThreads = true;
            int numColumn = 0;
  
            //REMOVE ELEMENTS FROM ARRAY
            //for (int i = 0; i < stockList.size(); i++) {
            //    stockList.remove(i);
            //}
            stockList.clear();
            //END REMOVE ELEMENTS FROM ARRAY

            //LOAD ARRAY FROM FILE
            getStocksFromFile();
            //ReadStk readStocks = new ReadStk();
            //stockList = readStocks.getStockList(); // arrayOfStocks

            /*
            for(String[] s:stockList){
                System.out.print("s[0]= " + s[0]);
                System.out.print("s[1]= " + s[1]);
                System.out.print("s[2]= " + s[2]);
                System.out.print("s[3]= " + s[3]);
                System.out.print("s[4]= " + s[4]);
                System.out.println("s[5]= " + s[5]);
            }
             */
            //END LOAD ARRAY FROM FILE

            //CLEAN TABLE
            for (int i = 0; i < priceTable.getModel().getColumnCount(); i++) {
                priceTable.getModel().setValueAt("",  priceRow, i);//stockPrice
                priceTable.getModel().setValueAt("",    chgRow, i);//stockChange
                priceTable.getModel().setValueAt("", preChgRow, i);//stockBuy
                priceTable.getModel().setValueAt("", symbolRow, i);//stockSymbol
            }
            
            //LOAD VALUE FROM FILE INTO TABLE
            for(int i =0;i<stockList.size();i++){
                priceTable.getModel().setValueAt(stockList.get(i)[1], symbolRow, i);//stockSymbol
                priceTable.getModel().setValueAt(stockList.get(i)[6], divRow, i);   // Divident % per year
            }
            
            //RUN THREADS
            for (String[] s : stockList) {
                WebStock ws = new WebStock();
                ws.stockIsActive    = s[0]; //stock isActive
                ws.stockSymbol      = s[1]; //stock symbol
                ws.stockId          = s[2]; //stock id for google
                ws.stockCompanyName = s[3]; //stock companyName
                //ws.stockBuy         = s[4]; //stock buy price
                //ws.stockIsBuy       = s[5]; //stock isBuy
                Thread t = new Thread(ws);
                t.setName("" + numColumn);
                t.start();
                numColumn = numColumn + 1;
                
                //CLEAN TABLE
                //for (int i = 0; i < priceTable.getModel().getColumnCount(); i++) {
                //    priceTable.getModel().setValueAt("", 0, i);//stockPrice
                //    priceTable.getModel().setValueAt("", 1, i);//stockChange
                //    priceTable.getModel().setValueAt("", 2, i);//stockBuy
                //    priceTable.getModel().setValueAt("", 3, i);//stockSymbol
                //}
            }//end for

            //run index thread, display index on frame title
            DispIndex di = new DispIndex();
            Thread ti = new Thread(di);
            ti.start();
            //end run index thread, display index on frame title

        }//end if

}//GEN-LAST:event_startBActionPerformed

    private void stopBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBActionPerformed
        // TODO add your handling code here:
        runThreads = false;
    }//GEN-LAST:event_stopBActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //getStocksFromFile();
        //for (String[] s : stockList) {
        //    System.out.print(s[1] + " ");
        //    System.out.print(s[5] + " ");
        //    System.out.println();
        //}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            File file = new File("hello.txt");
            System.out.println("***********"+file.getCanonicalPath());
            
            Process p = Runtime.getRuntime().exec("runcommitstk.bat");
            BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
             String line;
            while ((line = input.readLine()) != null) {
                System.out.println(line);
            }
            //Process p1 = Runtime.getRuntime().exec("calc.exe");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    class WebStock implements Runnable {

        int beginStr;
        int endStr;
        int beginStrRPCP;
        int endStrRPCP;
        int beginStrPMCP;
        int endStrPMCP;
        int beginIndex;
        int endIndex;
        int beginIndexRPCP;
        int endIndexRPCP;
        int beginIndexPMCP;
        int endIndexPMCP;
        
        String str1;
        String str1RPCP;
        String str1PMCP;

        String str2;//realPrice
        double str2Double; //realPriceDouble

        String str2RPCP;

        String str2PMCP;
        double str2PMCPDouble;//preMarketChangePrice
        
        String stockIsActive;
        String stockSymbol;
        String stockId;
        String stockCompanyName;
        String stockBuy;
        String stockIsBuy;

        double stockBuyDouble;
        String refRealPrice;
        String refRealPriceChange;
        String refPrePricePercent;
        Boolean PreMarketChangePercentDisp;
        
        double stockPriceUp5;
        double stockPriceUp10;
        double stockPriceDown5;
        double stockpriceDown10;
        double stockProfitPercent;
        
        TableColumn tcol;

        String realPrice;
        double realPriceDouble;

        String preRealPrice;
        double preRealPriceDouble;


        public void run() {

            //System.out.println("InnerClass");
            //System.out.println("stock= " + stock);
            refRealPrice       = "ref_" + stockId + "_l";
            refRealPriceChange = "ref_" + stockId + "_cp";
            refPrePricePercent = "ref_" + stockId + "_ecp";
            //System.out.println(refRaalPriceChange);
            
            //stockIsBuy = readStocks.stockIsBuy(stockSymbol);

            while (runThreads) {
                
                for (String[] s : stockList) {
                    if (stockSymbol.equals(s[1])) {
                        stockBuy         = s[4];
                        stockIsBuy       = s[5];

                    }
                }


                //System.out.println("stock= " + stockSymbol);
                //System.out.println("stockBuy= " + stockBuy);

                try {
                    WebFile file = new WebFile("http://www.google.com/finance?q=" + stockSymbol);
                    //WebFile file = new WebFile("http://www.google.com/finance?q=gs");
                    //WebFile file = new WebFile(stockPage);
                    String MIME = file.getMIMEType();
                    Object content = file.getContent();
                    if (MIME.equals("text/html") && content instanceof String) {
                        String str = (String) content;
                        //System.out.println(str);
                        str = str.replaceAll(",", "");
                        //System.out.println(str);

                        //Pattern p = Pattern.compile("<span id=\"ref_39232_l\">");
                        //Pattern p = Pattern.compile("<span class=\"pr\" id=\"ref_663137_l\">");
                        Pattern p = Pattern.compile(refRealPrice + "\">\\d*[.]\\d*[</]");
                        //System.out.println("Pattern= " +refRealPrice + "\">\\d*[.]\\d*[</]");
                        Matcher m = p.matcher(str);
                        boolean b = false;

                        while (b = m.find()) {
                            System.out.println("StrtString= " +m.start() + " Symbol= " +stockSymbol);
                            beginStr = m.start();
                        }
                        System.out.println("beginStr=" + beginStr);
                        //System.out.println("stockRef.length() =" +refRealPrice.length());
                        str1 = str.substring(beginStr, beginStr + refRealPrice.length() + 12);
                        System.out.println("str1= " +str1);


                        //find beginIndex
                        Pattern p1 = Pattern.compile(">");
                        Matcher m1 = p1.matcher(str1);

                        boolean b1 = false;
                        while (b1 = m1.find()) {
                            beginIndex = m1.start();
                        }
                        //find endIndex
                        Pattern p2 = Pattern.compile("<");
                        Matcher m2 = p2.matcher(str1);

                        boolean b2 = false;
                        while (b2 = m2.find()) {
                            endIndex = m2.start();
                        }

                        System.out.println("beginIndex= " + beginIndex);
                        System.out.println("endIndex= " + endIndex);
                        
                        str2 = str1.substring(beginIndex + 1, endIndex); //realPrice
                        //System.out.println("RealPrice= " + str2);
                        str2Double = Double.parseDouble(str2); // realPriceDouble
                        // realPriceDoubleMin){
                        //    realPriceDoubleMin
                        //}
                        //System.out.println("realPriceDouble= "+str2Double);
                        stockBuyDouble = Double.parseDouble(stockBuy); // buyPriceDouble
                        //System.out.println("stockBuyDouble= " +stockBuyDouble);

                        stockPriceUp5  = stockBuyDouble + stockBuyDouble * 0.05;
                        stockPriceUp10 = stockBuyDouble + stockBuyDouble * 0.10;

                        realPrice = str1.substring(beginIndex + 1, endIndex);
                        realPriceDouble = Double.parseDouble(realPrice);

                        //System.out.println(str2);
                        //System.out.println(Thread.currentThread().getName());


                        //RealTimeChangePercent
                        Pattern pRPCP = Pattern.compile(refRealPriceChange + "\">\\([-]*\\d*[.]\\d*[%][)]");
                        System.out.println("patternRealPriceChange= " +refRealPriceChange + "\">\\([-]*\\d*[.]\\d*[%][)]");
                        Matcher mRPCP = pRPCP.matcher(str);
                        boolean bRPCP = false;

                        while (bRPCP = mRPCP.find()) {
                            beginStrRPCP = mRPCP.start();
                        }
                        //System.out.println("beginStrRPCP= " + beginStrRPCP);
                        //System.out.println("refRealPriceChange =" +refRealPriceChange.length());
                        str1RPCP = str.substring(beginStrRPCP, beginStrRPCP + refRealPriceChange.length() + 12);
                        //System.out.println("str1RPCP= "+str1RPCP);

                        //find beginIndex
                        Pattern p1RPCP = Pattern.compile(">");
                        Matcher m1RPCP = p1RPCP.matcher(str1RPCP);

                        boolean b1RPCP = false;
                        while (b1RPCP = m1RPCP.find()) {
                            //System.out.println(m1RPCP.start());
                            beginIndexRPCP = m1RPCP.start();
                        }
                        //find endIndex
                        Pattern p2RPCP = Pattern.compile("<");
                        Matcher m2RPCP = p2RPCP.matcher(str1RPCP);

                        boolean b2RPCP = false;
                        while (b2RPCP = m2RPCP.find()) {
                            //System.out.println("m2RPCP= "+m2RPCP.start());
                            endIndexRPCP = m2RPCP.start();
                        }

                        //System.out.println("beginIndex" + beginIndex);
                        //System.out.println("endIndex" + endIndex);
                        str2RPCP = str1RPCP.substring(beginIndexRPCP + 2, endIndexRPCP - 2);
                        //System.out.println("str2RPCP= " + str2RPCP);

                        //END RealTimeChangePercent

                        
                        //PRE-AFTER MARKET
                        System.out.println("***AFTER***");

                        Calendar cal = Calendar.getInstance();

                        Calendar cal1 = Calendar.getInstance();
                        cal1.set(cal1.get(cal1.YEAR), cal1.get(cal1.MONTH), cal1.get(cal1.DAY_OF_MONTH), 9, 30);

                        Calendar cal2 = Calendar.getInstance();
                        cal2.set(cal2.get(cal2.YEAR), cal2.get(cal2.MONTH), cal2.get(cal2.DAY_OF_MONTH), 15, 59);

                        //Calendar cal3 = Calendar.getInstance();
                        //cal3.set(cal3.get(cal3.YEAR), cal3.get(cal3.MONTH), cal3.get(cal3.DAY_OF_MONTH), 8, 30);
                        //cal1.set(cal1.HOUR, 9);
                        //cal1.set(cal1.MINUTE, 30);

                        //System.out.println("cal= "+cal.getTime());
                        //System.out.println("cal1= "+cal1.getTime());
                        //System.out.println("cal2= "+cal2.getTime());

                        if (stockSymbol.equals("INX") |
                                stockSymbol.equals("NAK") |
                                stockSymbol.equals("OSG") |
                                stockSymbol.equals("PAS")) {
                            PreMarketChangePercentDisp = false;

                            if (cal.before(cal1)) {
                                realPriceChangeDisp = true;
                            } else {
                                realPriceChangeDisp = true;
                            }
                        } else {

                            if (cal.before(cal1)) {
                                realPriceChangeDisp = true;
                            } else {
                                realPriceChangeDisp = true;
                            }

                            //DISPLAY PRE AND AFTER MARKET CHANGES
                            if (cal.before(cal1) || cal.after(cal2)) {
                                PreMarketChangePercentDisp = true;
                            } else {
                                PreMarketChangePercentDisp = false;
                            }
                        }


                        if (PreMarketChangePercentDisp == true) {
                            
                            try{
                            //System.out.println("refPrePricePercent= " + refPrePricePercent);
                            Pattern pPMCP = Pattern.compile(refPrePricePercent + "\" class=\"ch[b-r]\">\\([-]*\\d*[.]\\d*[%]\\)");
                            //Pattern pPMCP = Pattern.compile(refPrePricePercent + "\" class=\"chr\">\\([-]*\\d*[.]\\d*[%]\\)");
                            System.out.println("patternPrePricepercent= " +refPrePricePercent + "\" class=\"chr\">\\([-]*\\d*[.]\\d*[%]\\)");
                            //Pattern pPMCP = Pattern.compile(refPrePricePercent + "\" class=\"chg\">\\([-]*\\d*[.]\\d*[%]\\)");
                            //Pattern pPMCP = Pattern.compile(refPrePricePercent + "\" class=\"\">\\([-]*\\d*[.]\\d*[%]\\)");
                            //System.out.println("patternPrePricepercent= " +refPrePricePercent + "\" class=\"chg\">\\([-]*\\d*[.]\\d*[%]\\)");
                            Matcher mPMCP = pPMCP.matcher(str);
                            //System.out.println("str= " + str);

                            boolean bPMCP = false;
                            while (bPMCP = mPMCP.find()) {
                                beginStrPMCP = mPMCP.start();
                                System.out.println("beginStrPMCP= " + beginStrPMCP);
                            }
                            
                            System.out.println("beginStrPMCP = "+beginStrPMCP);
                            //System.out.println("refPrePricePercent =" + refPrePricePercent.length());
                            str1PMCP = str.substring(beginStrPMCP, beginStrPMCP + refPrePricePercent.length() + 23);
                            System.out.println("str1PMCP" + str1PMCP);

                            //find beginIndex
                            Pattern p1PMCP = Pattern.compile(">");
                            Matcher m1PMCP = p1PMCP.matcher(str1PMCP);

                            boolean b1PMCP = false;
                            while (b1PMCP = m1PMCP.find()) {
                                beginIndexPMCP = m1PMCP.start();
                            //System.out.println("beginIndexPMCP= " + beginIndexPMCP);
                            }


                            //find endIndex
                            Pattern p2PMCP = Pattern.compile("<");
                            Matcher m2PMCP = p2PMCP.matcher(str1PMCP);

                            boolean b2PMCP = false;
                            while (b2PMCP = m2PMCP.find()) {
                                endIndexPMCP = m2PMCP.start();
                            //System.out.println("endIndexPMCP= " + endIndexPMCP);
                            }

                            str2PMCP = str1PMCP.substring(beginIndexPMCP + 2, endIndexPMCP - 2);
                            str2PMCPDouble = Double.parseDouble(str2PMCP);

                            str2Double = str2Double + str2Double*str2PMCPDouble/100;

                            //System.out.println("str2PMCPDouble= " + str2PMCPDouble);
                            //System.out.println("str2Double= " + str2Double);
                            }catch(Exception e){
                                System.out.println("Exception = There is no pre/afetr price yet " + e);
                            }

                        }//END IF
                        //System.out.println("***END AFTER***");
                        //END PRE-AFTER MARKET
                        
                        
                        //DIVIDENTS*********************************************
                        System.out.println("***DIVIDENTS***");
                        try{
                        int sDiv  = 0;
                        int s1Div = 0;
                        int s2Div = 0;
                        
                        //find where to start parsing
                        Pattern pDiv = Pattern.compile("latest_dividend-dividend_yield");
                        Matcher mDiv = pDiv.matcher(str);
                        boolean bDiv = false;
                        while (bDiv = mDiv.find()) {
                            System.out.println("sDiv = " + mDiv.start());
                            sDiv = mDiv.start();
                        }
                        
                        //find the string and add addjustmet to the string
                        String str1Div = str.substring(sDiv + 64, sDiv + 100);
                        System.out.println("str1Div = " + str1Div);

                        //find start for / <td class="val">0.03/1.24
                        Pattern p1Div = Pattern.compile("\\d/");
                        Matcher m1Div = p1Div.matcher(str1Div);
                        boolean b1Div = false;
                        while (b1Div = m1Div.find()) {
                            System.out.println("s1Div= " + m1Div.start());
                            s1Div = m1Div.start();
                        }
                        
                        //find end for </td
                        Pattern p2Div = Pattern.compile("<");
                        Matcher m2Div = p2Div.matcher(str1Div);
                        boolean b2Div = false;
                        while (b2Div = m2Div.find()) {
                            System.out.println("s2Div= " + m2Div.start());
                            s2Div = m2Div.start();
                            break; //find just first match
                        }
                        
                        str2Div = str1Div.substring(s1Div + 2, s2Div);
                        System.out.println("str2Div = " + str2Div);                       
                        
                        }catch(Exception e){
                            str2Div = "0";
                            System.out.println("Exception Dividents" + e);
                        }
                        System.out.println("***END DIVIDENTS***");
                        //END DIVIDENTS*****************************************
                        
              

                        //PUT VALUES IN A TABLE
                        try {
                            String a = Thread.currentThread().getName();
                            int t = Integer.parseInt(a);

                            System.out.println("t= " + t);

                            //str2Double = Double.parseDouble(str2); // realPrice
                            //stockBuyDouble = Double.parseDouble(stockBuy); // buyPrice

                            //stockPriceUp5 = stockBuyDouble + stockBuyDouble * 0.05;
                            //stockPriceUp10 = stockBuyDouble + stockBuyDouble * 0.10;

                            if (stockBuyDouble != 0) {
                                stockProfitPercent = str2Double * 100 / stockBuyDouble - 100;
                            } else {
                                stockProfitPercent = 0;
                            }

                            NumberFormat nf = NumberFormat.getInstance();
                            nf.setMaximumFractionDigits(2);                         
                            //stockProfitPercent = nf.format(stockProfitPercent);

                            //System.out.println("str2Double= " + str2Double);
                            //System.out.println("stockBuyDouble= " + stockBuyDouble);
                            //System.out.println("stockPriceUp5= " + stockPriceUp5);
                            //System.out.println("stockPriceUp10= " + stockPriceUp10);


                            //set color of fonts
                            if (stockBuyDouble == 0) {
                                tcol = priceTable.getColumnModel().getColumn(t);
                                tcol.setCellRenderer(new CustomCellRenderer());
                            //DISPLAY FOR ALL RED - SIGNAL BUY/LOOSE
                            } else if (str2Double <= stockBuyDouble) {
                                tcol = priceTable.getColumnModel().getColumn(t);
                                tcol.setCellRenderer(new CustomCellRenderer0());
                            //DISPLAY FOR ISBUY
                            } else if ((str2Double > stockPriceUp5) && (str2Double < stockPriceUp10) && stockIsBuy.equals("1")) {
                                tcol = priceTable.getColumnModel().getColumn(t);
                                tcol.setCellRenderer(new CustomCellRenderer5());
                            //DISPLAY FOR ISBUY
                            } else if ((str2Double >= stockPriceUp10) && stockIsBuy.equals("1")) {
                                tcol = priceTable.getColumnModel().getColumn(t);
                                tcol.setCellRenderer(new CustomCellRenderer10());
                            } else {
                                tcol = priceTable.getColumnModel().getColumn(t);
                                tcol.setCellRenderer(new CustomCellRenderer());
                            }
                            //end set color of fonts

                            //REAL PRICE
                            //if(stockSymbol.equals("INX")){
                            //   str2Double = str2Double/10;
                            //}
                            priceTable.getModel().setValueAt(nf.format(str2Double), priceRow, t);//realPrice
                            //priceTable.getModel().setValueAt(str2, 0, t);//realPrice
                            
                            //REAL PRICE CHANGE PERCENT
                            //System.out.println("str2RPCP"+str2RPCP);
                            System.out.println("realPriceChangeDisp="+realPriceChangeDisp);
                            if(realPriceChangeDisp==true){
                                //System.out.println("str2RPCP"+str2RPCP);
                                priceTable.getModel().setValueAt(str2RPCP, chgRow, t);//realPriceChangeProcent
                            }
    
                            priceTable.getModel().setValueAt(str2PMCP, preChgRow, t);//preMarketChangeProcent
                            priceTable.getModel().setValueAt(stockSymbol, symbolRow, t);//stockSymbol
                            priceTable.getModel().setValueAt(nf.format(stockProfitPercent), profitRow, t);//stockProfitPercent
                            priceTable.getModel().setValueAt(str2Div, divRow, t);//Dividents
                            priceTable.getModel().setValueAt(5000/str2Double, qtyBuyRow, t);//3000/x
                            System.out.println("t=" + t);
                        } catch (NumberFormatException e) {
                            System.out.println("ErrorLine700 -" + e );
                        }
                    //END PUT VALUES IN A TABLE

                    }//END IF CONTENT

                } catch (Exception e) {
                    System.out.println("exception= " + e);
                }


                try {
                    Thread.sleep(60000);
                } catch (Exception e) {
                    System.out.println("Exception sleep");
                }

            }//end while

        }//END RUN
        
    }//end WebStock inner class
    
    
    
    class DispIndex implements Runnable {

        public void run() {
             while (runThreads) {
                System.out.println("***START INDEX***");
                      
                try {
                    int sInx = 0;
                    int s1Inx = 0;
                    int s2Inx = 0;
                    int sInxChg = 0;
                    int s1InxChg = 0;
                    int s2InxChg = 0;
                    String str1InxChg = "";
                    String str2InxChg = "";
                    
                    WebFile file = new WebFile("http://www.google.com/finance?q=.INX");
                    String MIME = file.getMIMEType();
                    Object content = file.getContent();
                    if (MIME.equals("text/html") && content instanceof String) {
                        String strInx = (String) content;
                        //System.out.println(str);
                        strInx = strInx.replaceAll(",", "");

                        Pattern pInx = Pattern.compile("ref_626307_l\"");
                        Matcher mInx = pInx.matcher(strInx);
                        boolean bInx = false;
                        while (bInx = mInx.find()) {
                            System.out.println("sInx = " + mInx.start());
                            sInx = mInx.start();
                        }

                        String str1Inx = strInx.substring(sInx, sInx + 60);
                        System.out.println("str1Inx = " + str1Inx);

                        //find start for div
                        Pattern p1Inx = Pattern.compile("\\d/");
                        Matcher m1Inx = p1Inx.matcher(str1Inx);
                        boolean b1Inx = false;
                        while (b1Inx = m1Inx.find()) {
                            System.out.println("s1Inx= " + m1Inx.start());
                            s1Inx = m1Inx.start();
                        }


                        //find end for div
                        Pattern p2Inx = Pattern.compile("<");
                        Matcher m2Inx = p2Inx.matcher(str1Inx);
                        boolean b2Inx = false;
                        while (b2Inx = m2Inx.find()) {
                            System.out.println("s2Inx = " + m2Inx.start());
                            s2Inx = m2Inx.start();
                            //stop the loop afetr first match
                            if (s2Inx > 0) {
                                break;
                            }
                        }

                        String str2Inx = str1Inx.substring(s1Inx + 14, s2Inx);
                        //System.out.println("str2Inx = " + str2Inx);
                        
                
                //GET SPX CHANGE %        
                sInxChg = getPos(strInx,"ref_626307_cp\""); 
                str1InxChg = strInx.substring(sInxChg, sInxChg+50);
                System.out.println("str1InxChg = " + str1InxChg);//str1 == ref_626307_cp">(-1.08%)</span>
                
                s1InxChg = getPos(str1InxChg,"\">");
                s2InxChg = getPos(str1InxChg,"</");
                str2InxChg = str1InxChg.substring(s1InxChg+3, s2InxChg-2);
                System.out.println("str2InxChg = " + str2InxChg);
                //END GET SPX CHANGE %        
                
                               
                //DSIPLAY IN THE FRAME TITLE        
                DispFrame.super.setTitle(str2InxChg + " " + str2Inx);
                        
                    }//end if

                } catch (Exception e) {
                    System.out.println("exception= " + e);
                }
                
            
               
                try {
                    Thread.sleep(60000);
                } catch (Exception e) {
                    System.out.println("Exception sleep");
                }
                
                 System.out.println("***ENDINDEX***");
            }//end while
        }//end run
    }//end Dispindex inner class

    
    //LOAD STOCK FROM FILE
    public void getStocksFromFile() {
        ReadStk readStocks = new ReadStk();
        stockList = readStocks.getStockList(); // arrayOfStocks
    }

    
    public int getPos(String myStr, String myPattern) {
        int s = 0;
        boolean b = false;
        Pattern p = Pattern.compile(myPattern);
        Matcher m = p.matcher(myStr);
        while (b = m.find()) {
            System.out.println("getPos-->s = " + m.start());
            s = m.start();
            //stop the loop afetr first match
            if (s > 0) {
                break;
            }
        }
        return s;
    }
    
    
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new DispFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable priceTable;
    private javax.swing.JButton startB;
    private javax.swing.JButton stopB;
    // End of variables declaration//GEN-END:variables
}
